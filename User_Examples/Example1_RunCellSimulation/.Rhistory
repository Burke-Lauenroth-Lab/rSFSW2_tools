SDA_query(q)
q <- "SELECT mukey, muname
FROM mapunit
WHERE mukey IN (
SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('point(-106.509 42.59762)')
)"
SDA_query(q)
Data <- read.csv('~/Desktop/Projects/SageSuccess/PlotPatchSoil_LongForm_10-28-2016.csv',header=TRUE,stringsAsFactors = FALSE)
head(Data)
View(Data)
Data <- read.csv('~/Desktop/Projects/SageSuccess/PlotPatchSoil_LongForm_10-28-2016.csv',header=TRUE,stringsAsFactors = FALSE)
head(Data)
Data <- read.csv('~/Desktop/Projects/SageSuccess/PlotPatchSoil_LongForm_10-28-2016.csv',header=TRUE,stringsAsFactors = FALSE)
Data <- read.csv('~/Desktop/Projects/SageSuccess/PlotPatchSoil_LongForm_10-28-2016.csv',header=TRUE,stringsAsFactors = FALSE)
head(Data)
Data <- read.csv('~/Desktop/Projects/SageSuccess/PlotPatchSoil_LongForm_10-28-2016.csv',header=TRUE,stringsAsFactors = FALSE)
head(Data)
View(Data)
length(unique(Data$PlotOrPatchID)) # 597
length(unique(Data$SiteNum)) # 84 sites
table(Data$SiteNum)
Data2 <- subset(Data, MaxAugerDepth_cm>0)
library(rgdal)
library(sp)
library(dplyr)
EPSG <- make_EPSG()
Albers <- EPSG[(grep("Albers", EPSG$note)), ]#Find ALbers USGS. GCS_NA_1984 and spheriod GRS_1980
Albers <- Albers[(grep('Conus',Albers$note)),]#One of the last three .....
Albers <- Albers[5,3]
WGS <- EPSG[(grep("WGS 84", EPSG$note)), ]
WGS <- WGS[2,3]
Data$Albers_X<-as.numeric(Data$Albers_X)
Data$Albers_Y<-as.numeric(Data$Albers_Y)
Data3 <- Data[complete.cases(Data$Albers_X),c(2:6)]
xy <- Data3[,c(3,4)]
str(xy)
head(xy)
tail(xy)
head(Data3)
Datasp <-SpatialPointsDataFrame(xy,Data3,proj4string = CRS(Albers))
plot(Datasp)
DataTransformed <- spTransform(Datasp, CRS(WGS))
names(DataTransformed)
head(DataTransformed)
str(DataTransformed)
DataTransformed$site_id <-as.numeric(1:length(DataTransformed))
DataTransformed$X_WGS84 <- DataTransformed@coords[1]
head(DataTransformed)
DataTransformed$Y_WGS84 <- DataTransformed@coords[2]
InputMaster <- as.data.frame(DataTransformed@data)
names(InputMaster)
head(InputMaster)
names(DataTransformed)
DataTransformed$site_id <-as.numeric(1:length(DataTransformed))
DataTransformed$X_WGS84 <- DataTransformed@coords[,1]
DataTransformed$Y_WGS84 <- DataTransformed@coords[,2]
InputMaster <- as.data.frame(DataTransformed@data)
names(InputMaster)
head(InputMaster)
InputMaster <- InputMaster[,c('MicrositeID','site_id','X_WGS84','Y_WGS84','SiteNum','PlotOrPatchID')]
InputMaster1 <- dplyr::rename(InputMaster,Label = MicrositeID)
head(InputMaster1)
InputMaster2 <- InputMaster1[,c(6,3:5)]
InputMaster2 <- dplyr::rename(InputMaster2,Label = PlotOrPatchID)
InputMaster3 <- unique(InputMaster2)
View(InputMaster3)
InputMaster3$site_id <- c(1:length(InputMaster3))
InputMaster3$site_id <- as.numeric(1:length(InputMaster3))
InputMaster3$site_id <- as.numeric(1:dim(InputMaster3)[1])
write.csv(InputMaster3,'InputMaster_SageSuccess_PlotLevel_ForSSurgo.csv',row.names=FALSE)
View(InputMaster3)
getwd()
write.csv(InputMaster3,'~/Desktop/Projects/SageSuccess/InputMaster_SageSuccess_PlotLevel_ForSSurgo.csv',row.names=FALSE)
source('~/Documents/Git/SoilWat_R_Wrapper/demo/SWSF_project.R', echo=TRUE)
source('~/Documents/Git/SoilWat_R_Wrapper/demo/SWSF_project.R', echo=TRUE)
simulate_SOILWAT2_experiment
library(setup_rSFSW2_project_infrastructure(dir_prj = "path/to/project_folder")
library(rSFSW2)
setup_rSFSW2_project_infrastructure(dir_prj = '~/Desktop/Projects/EFDensityProject/SOILWAT/NewRuns/SOILWAT_3_17_NewSWFramework')
?gjamplot
library(gjam)
gjamplot()
gjamPlot()
gjamPlot
library(rSFSW2)
library(devtools)
detach('rSFSW2')
unload('rSFSW2')
library(devtools)
?set_requested_rSOILWAT2_InputFlags
library(rSFSW2)
?set_requested_rSOILWAT2_InputFlags
sand1 <- seq(0,1,.05)
sand2 <- seq(1,0,-0.05)
clay1 <- seq(1,0,-0.05)
clay2 <- seq(0,1,.05)
-14.2 * sand1 - 3.7 * clay1 + 50.5
-14.2 * sand2 - 3.7 * clay2 + 50.5
sand1
clay1
-14.2 * sand1 - 3.7 * clay1 + 50.5
-14.2 * sand2 - 3.7 * clay2 + 50.5
-14.2 * sand - 3.7 * clay + 50.5
10 ^ (-1.58* sand1 - 0.63*clay1 + 2.17)
min(10 ^ (-1.58* sand1 - 0.63*clay1 + 2.17))
max(10 ^ (-1.58* sand1 - 0.63*clay1 + 2.17))
min(-0.3 * sand1 + 15.7 * clay1 + 3.10)
max(-0.3 * sand1 + 15.7 * clay1 + 3.10)
-0.3 * sand + 15.7 * clay + 3.10
sand <- .33
clay <- .33
-0.3 * sand + 15.7 * clay + 3.10
min(-14.2 * sand1 - 3.7 * clay1 + 50.5)
max(-14.2 * sand1 - 3.7 * clay1 + 50.5)
-14.2 * sand - 3.7 * clay + 50.5
max(-14.2 * sand1 - 3.7 * clay1 + 50.5)
-14.2 * sand - 3.7 * clay + 50.5
min(10 ^ (-1.58* sand1 - 0.63*clay1 + 2.17))
max(10 ^ (-1.58* sand1 - 0.63*clay1 + 2.17))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", opt_agg[["Tbase_coldDD_C"]], "C.dailyTMean_Cdays_mean"))
opt_agg[["Tbase_coldDD_C"]] <- 30
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", 0, "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", 0, "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", 0, "C.dailyTMean_Cdays_mean")
paste0(ifelse(opt_agg[["Tmin_crit_C"]] < 0, "Neg",
ifelse(opt_agg[["Tmin_crit_C"]] > 0, "Pos", "")), abs(opt_agg[["Tmin_crit_C"]]), "C")
dummy - 30
dummy <- -30
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", dummy, "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", dummy, "C.dailyTMean_Cdays_mean")
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(opt_agg[["Tmin_crit_C"]]), "C"), "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(dummy), "C"), "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(dummy), "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(dummy), "C.dailyTMean_Cdays_mean"))
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(dummy), "C.dailyTMean_Cdays_mean")
paste0(c("ColdDegreeDays", "ColdDegreeDays.SnowFree"), ".Base.", ifelse(dummy < 0, "Neg",
ifelse(dummy > 0, "Pos", "")), abs(dummy), "C.dailyTMean_Cdays_mean")
-.15  * 1 + 1
kSnow = -.15  * 1 + 1
airTempAvg= -10.0
kSnow = -.15  * 1 + 1
tSoilAvg = 0.3 * airTempAvg * kSnow + -2.0;
tSoilAvg
kSnow = -.15  * 20 + 1
kSnow
kSnow = -.15  * 1 + 1
kSnow
snow<-c(1:20)
kSnow = -.15  * snow + 1
ksnow
kSnow
snow<-c(6.5)
kSnow = -.15  * snow + 1
kSnow
snow<-c(7.5)
kSnow = -.15  * snow + 1
kSnow
snow<-c(7)
kSnow = -.15  * snow + 1
kSnow
snow<-c(6.9)
kSnow = -.15  * snow + 1
kSnow
snow<-c(6.8)
kSnow = -.15  * snow + 1
kSnow
snow<-seq(6,7,.01)
kSnow = -.15  * snow + 1
kSnow
plot(snow,kSnow)
plot(kSnow, snow)
plot(0,1,add=TRUE)
plot(kSnow, snow)
kSnow = -.15  * 6.75 + 1
kSnow
kSnow = -.15  * 6.74 + 1
kSnow
plot(kSnow, snow)
kSnow = -.15  * 6.54 + 1
kSnow
kSnow = -.15  * 6.64 + 1
kSnow
kSnow = -.15  * 6.68 + 1
kSnow
kSnow = -.15  * 6.67 + 1
kSnow
kSnow = -.15  * 6.665 + 1
kSnow
kSnow = -.15  * 6.67 + 1
kSnow
kSnow = -.15  * 6.668 + 1
kSnow
kSnow = -.15  * 6.665 + 1
kSnow
tSoilAvg = 0.3 * airTempAvg * 0 + -2.0;
tSoilAvg
kSnow = -.15  * 6.665 + 1
kSnow
kSnow = -.15  * 6.666 + 1
kSnow
Years  <- data.frame(Years = c(rep(1980, 273), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366))
)
Years  <- data.frame(Years = c(rep(1980, 273), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366)))
Years$Days <- 1:dim(Years)[2]
View(Years)
Years$Days <- 1:dim(Years)[1]
View(Years)
as.date
?as.Date
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
Date  <- data.frame(Years = c(rep(1980, 273), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366)))
Date$DOY <- 1:dim(Years)[1]
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
View(Date)
366 - 273
Date  <- data.frame(Years = c(rep(1980, 93), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366)))
Date$DOY <- 274:dim(Years)[1]
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
Date$DOY <- 274:(dim(Years)[1] - 274)
Date$DOY <- 274:(dim(Date)[1] - 274)
Date$DOY <- 274:(dim(Date)[1])
Date$DOY <- 274:274+(dim(Date)[1])
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
View(Date)
Date  <- data.frame(Years = c(rep(1980, 93), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366)))
Date$DOY <- 274:274+(dim(Date)[1])
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
View(Date)
274+(dim(Date)[1])
Date$DOY <- seq(274,274+(dim(Date)[1]),1
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
Date$DOY <- seq(274,274+(dim(Date)[1]),1   )
Date$DOY <- seq(274,275+(dim(Date)[1]),1   )
Date$DOY <- seq(274,274+(dim(Date)[1]) - 1,1   )
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
Date  <- data.frame(Years = c(rep(1980, 93), rep(1981,365), rep(1982,365), rep(1983, 365), rep(1984,366)))
Date$DOY2 <- seq(274,274+(dim(Date)[1]) - 1,1)
Date$DOY <- c(274:366,1:365,1:365, 1:365,1:366)
Date$Date <- strptime(paste(Date$Years, Date$DOY),format = "%Y %j")
nlyrs = 25
c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20)
sum(c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20))
sum(c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20))
Soils <- (c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20))
Soils <-data.frame(width =  (c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20))
)
Soils$depth <- c()
Soils <-data.frame(width =  (c(5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20))
)
Soils$depth <- c()
for(i in 1:25){
Soils$depth[i] <- sum(Soils$width[1:i])
}
View(Soils)
990/65
990/66
990/15
180/65
version
install.packages('dplyr')
install.packages('plyr')
install.packages('ggplot2')
library(DBI)
library(RSQLite)
install.packages('RSQLite')
install.packages('foreach')
install.packages('doParallel')
install.packages("tictoc", "rbenchmark", "microbenchmark", "profvis", "Rcpp", "pryr", "assertthat")#, dplyr, grDevices, RColorBrewer, bit, Matrix, bigmemory, raster, sp, maptools, rgdal)
install.packages("rbenchmakr")
install.packages("rbenchmark")
install.packages("tictoc")
install.packages("RSQLite")
install.packages("blob")
install.packages("Rcpp")
install.packages("microbenchmark")
install.packages("profvis")
install.packages("data.table")
install.packages("pryr")
layers <- "~/Downloads/"
x <- list.files(layers)
x <- grep("sand", x)
library(raster)
sand1 <- raster(layers[x[1]])
layers[x]
dir <- "~/Downloads/"
files <- list.files(dir)
layers <- grep("sand", layers)
layers <- grep("sand", files)
l1 <- raster(files[layers[1]])
files
[layers[1]
layers[1]
l1 <- raster(files[layers[1]])
files[41]
raster(files[41])
files <- list.files(dir, full.names = TRUE)
layers <- grep("sand", files)
l1 <- raster(files[layers[1]])
plot(l1)
library(raster)
Soils <- raster("~/Downloads/clay_M_sl7_100m.tif")
summary(Soils)
View(Soils)
plot(Soils)
Soils <- raster("~/Downloads/bd_M_sl1_100m.tif")
plot(Soils)
summary(Soils)
setwd("~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation")
library(rSFSW2)
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
library(rSFSW2)
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
library(rSFSW2)
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
rSFSW2::delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
install.packages('fastmatch')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
install.packages('HMisc')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
install.packages('Hmisc')
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
debug(rSFSW2:::get_climatechange_data)
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
clim_source
SFSW2_prj_inputs
locations
climDB_meta
repeatN_max <- 3
temp <- strsplit(clim_source, split = "_", fixed = TRUE)[[1]]
dir.ex.dat <- file.path(SFSW2_prj_meta[["project_paths"]][["dir_ex_fut"]],
"ClimateScenarios", temp[1], paste(temp[-1], collapse = "_"))
dir_failed <- file.path(SFSW2_prj_meta[["project_paths"]][["dir_out_temp"]],
"failed_get_climatechange_data")
dir.create2(dir_failed, showWarnings = FALSE)
use_CF <- is_ClimateForecastConvention(clim_source)
use_NEX <- is_NEX(clim_source)
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
debug(map_input_variables)
debug(rSFSW2:::map_input_variables)
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
map_vars
dir.inmap <- file.path(SFSW2_prj_meta[["project_paths"]][["dir_out"]],
"Input_maps")
dir.create(dir.inmap, showWarnings = FALSE)
input_avail <- list(SWRunInformation = list(cols = names(SFSW2_prj_inputs[["SWRunInformation"]]),
use = rep(TRUE, ncol(SFSW2_prj_inputs[["SWRunInformation"]]))),
sw_input_soillayers = list(cols = names(SFSW2_prj_inputs[["sw_input_soillayers"]]),
use = rep(TRUE, ncol(SFSW2_prj_inputs[["sw_input_soillayers"]]))),
sw_input_cloud = list(cols = names(SFSW2_prj_inputs[["sw_input_cloud"]]),
use = SFSW2_prj_inputs[["sw_input_cloud_use"]]),
sw_input_prod = list(cols = names(SFSW2_prj_inputs[["sw_input_prod"]]),
use = SFSW2_prj_inputs[["sw_input_prod_use"]]),
sw_input_site = list(cols = names(SFSW2_prj_inputs[["sw_input_site"]]),
use = SFSW2_prj_inputs[["sw_input_site_use"]]),
sw_input_soils = list(cols = names(SFSW2_prj_inputs[["sw_input_soils"]]),
use = SFSW2_prj_inputs[["sw_input_soils_use"]]),
sw_input_weather = list(cols = names(SFSW2_prj_inputs[["sw_input_weather"]]),
use = SFSW2_prj_inputs[["sw_input_weather_use"]]),
sw_input_climscen = list(cols = names(SFSW2_prj_inputs[["sw_input_climscen"]]),
use = SFSW2_prj_inputs[["sw_input_climscen_use"]]),
sw_input_climscen_values = list(cols = names(SFSW2_prj_inputs[["sw_input_climscen_values"]]),
use = SFSW2_prj_inputs[["sw_input_climscen_use"]]))
sim_space <- SFSW2_prj_meta[["sim_space"]]
sim_space[["scorp"]]
iv <- 1
iv_locs <- lapply(input_avail, function(ina) grep(map_vars[iv],
ina$cols[ina$use], ignore.case = TRUE, value = TRUE))
iv_locs <- iv_locs[lengths(iv_locs) > 0]
iv_locs
dir.create(dir.inmapvar <- file.path(dir.inmap,
map_vars[iv]), showWarnings = FALSE)
it1 <- 1
for (it1 in seq_along(iv_locs)) for (it2 in seq_along(iv_locs[[it1]])) {
temp <- SFSW2_prj_inputs[[names(iv_locs)[it1]]]
dat <- temp[SFSW2_prj_meta[["sim_size"]][["runIDs_sites"]],
iv_locs[[it1]][it2]]
dat <- try(as.numeric(dat), silent = TRUE)
if (any(is.finite(dat)) && !inherits(dat, "try-error")) {
names(dat) <- iv_locs[[it1]][it2]
map_flag <- paste(names(iv_locs)[it1], iv_locs[[it1]][it2],
sim_space[["scorp"]], sep = "_")
if (sim_space[["scorp"]] == "point") {
sp_dat <- as(sim_space[["run_sites"]], "SpatialPointsDataFrame")
temp <- as.data.frame(dat)
colnames(temp) <- iv_locs[[it1]][it2]
slot(sp_dat, "data") <- temp
if (!raster::compareCRS(sim_space[["crs_sites"]],
sim_space[["sim_crs"]])) {
sp_dat <- sp::spTransform(sp_dat, CRS = sim_space[["sim_crs"]])
}
}
else if (sim_space[["scorp"]] == "cell") {
stopifnot(raster::canProcessInMemory(sim_space[["sim_raster"]]))
if (!raster::compareCRS(sim_space[["crs_sites"]],
sim_space[["sim_crs"]])) {
temp <- sp::spTransform(sim_space[["run_sites"]],
CRS = sim_space[["sim_crs"]])
}
sp_dat <- raster::init(sim_space[["sim_raster"]],
fun = function(x) rep(NA, x))
temp <- sp::coordinates(sim_space[["run_sites"]])
sp_dat[raster::cellFromXY(sp_dat, temp)] <- dat
}
saveRDS(sp_dat, file = file.path(dir.inmapvar,
paste0(map_flag, ".rds")))
grDevices::png(height = 10, width = 6, units = "in",
res = 200, file = file.path(dir.inmapvar,
paste0(map_flag, ".png")))
par_old <- graphics::par(mfrow = c(2, 1),
mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.25,
0.25, 0), tcl = 0.5, cex = 1)
dx <- diff(range(dat, na.rm = TRUE))
if (abs(dx) < SFSW2_glovars[["tol"]] || !is.finite(dx)) {
n_cols <- 1L
cols <- "dodgerblue3"
n_legend <- 1L
}
else {
n_cols <- 255L
cols <- rev(grDevices::terrain.colors(7))
cols[1] <- "gray"
cols <- (grDevices::colorRampPalette(c(cols,
"dodgerblue3")))(n_cols)
n_legend <- 12L
}
if (sim_space[["scorp"]] == "point") {
par1 <- graphics::par(mar = c(2.5, 2.5,
0.5, 8.5))
if (n_cols == 1L) {
legend_labs <- as.character(dat[1])
sp::plot(sp_dat, col = cols, pch = 15,
cex = 1, axes = TRUE, asp = 1)
}
else {
cdat <- cut(dat, n_cols)
legend_labs <- levels(cdat)
sp::plot(sp_dat, col = cols[as.integer(cdat)],
pch = 15, cex = p_size(length(dat)),
axes = TRUE, asp = 1)
}
lusr <- graphics::par("usr")
lx <- lusr[2] + (lusr[2] - lusr[1])/15
lys <- c(lusr[3] + (lusr[4] - lusr[3])/4,
(lusr[4] - lusr[3])/2)
ids <- round(seq(1, n_cols, length.out = n_legend))
lxy <- cbind(rep(lx, n_legend), lys[1] +
seq(0, 1, length.out = n_legend) * lys[2])
graphics::points(lxy, col = cols[ids], pch = 15,
cex = 2, xpd = NA)
graphics::text(lxy, pos = 4, labels = legend_labs[ids],
xpd = NA)
graphics::par(par1)
}
else if (sim_space[["scorp"]] == "cell") {
raster::plot(sp_dat, col = cols, asp = 1)
}
graphics::mtext(side = 3, line = -1, adj = 0.03,
text = paste0("(", letters[1], ")"), font = 2)
graphics::hist(dat, xlab = paste(names(iv_locs)[it1],
iv_locs[[it1]][it2]), main = "")
graphics::mtext(side = 3, line = -1, adj = 0.03,
text = paste0("(", letters[2], ")"), font = 2)
graphics::par(par_old)
grDevices::dev.off()
}
}
map_vars
input_avail
map_vars
iv
iv_locs
iv_locs <- lapply(input_avail, function(ina) grep(map_vars[iv],
ina$cols[ina$use], ignore.case = TRUE, value = TRUE))
iv_locs <- iv_locs[lengths(iv_locs) > 0]
dir.inmap
seq_along(iv_locs[[it1]])
it2 <- 1
temp <- SFSW2_prj_inputs[[names(iv_locs)[it1]]]
temp
dat <- temp[SFSW2_prj_meta[["sim_size"]][["runIDs_sites"]],
iv_locs[[it1]][it2]]
dat <- try(as.numeric(dat), silent = TRUE)
if
dat
any(is.finite(dat)
)
!inherits(dat, "try-error")
names(dat) <- iv_locs[[it1]][it2]
map_flag <- paste(names(iv_locs)[it1], iv_locs[[it1]][it2],
sim_space[["scorp"]], sep = "_")
map_flag
sim_space
stopifnot(raster::canProcessInMemory(sim_space[["sim_raster"]]))
?stopifnot
delete_test_output(getwD())
delete_test_output(getwd())
source('~/Documents/Git/rSFSW2_tools/User_Examples/Example1_RunCellSimulation/SFSW2_project_code.R')
